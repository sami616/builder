/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as PagesIndexImport } from './routes/pages.index'
import { Route as LayoutPagesIdIndexImport } from './routes/_layout.pages.$id.index'
import { Route as LayoutPagesIdPreviewImport } from './routes/_layout.pages.$id.preview'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PagesIndexRoute = PagesIndexImport.update({
  id: '/pages/',
  path: '/pages/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutPagesIdIndexRoute = LayoutPagesIdIndexImport.update({
  id: '/pages/$id/',
  path: '/pages/$id/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPagesIdPreviewRoute = LayoutPagesIdPreviewImport.update({
  id: '/pages/$id/preview',
  path: '/pages/$id/preview',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/pages/': {
      id: '/pages/'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof PagesIndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout/pages/$id/preview': {
      id: '/_layout/pages/$id/preview'
      path: '/pages/$id/preview'
      fullPath: '/pages/$id/preview'
      preLoaderRoute: typeof LayoutPagesIdPreviewImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/pages/$id/': {
      id: '/_layout/pages/$id/'
      path: '/pages/$id'
      fullPath: '/pages/$id'
      preLoaderRoute: typeof LayoutPagesIdIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutPagesIdPreviewRoute: typeof LayoutPagesIdPreviewRoute
  LayoutPagesIdIndexRoute: typeof LayoutPagesIdIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutPagesIdPreviewRoute: LayoutPagesIdPreviewRoute,
  LayoutPagesIdIndexRoute: LayoutPagesIdIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/pages': typeof PagesIndexRoute
  '/pages/$id/preview': typeof LayoutPagesIdPreviewRoute
  '/pages/$id': typeof LayoutPagesIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/pages': typeof PagesIndexRoute
  '/pages/$id/preview': typeof LayoutPagesIdPreviewRoute
  '/pages/$id': typeof LayoutPagesIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/pages/': typeof PagesIndexRoute
  '/_layout/pages/$id/preview': typeof LayoutPagesIdPreviewRoute
  '/_layout/pages/$id/': typeof LayoutPagesIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/pages' | '/pages/$id/preview' | '/pages/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/pages' | '/pages/$id/preview' | '/pages/$id'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/pages/'
    | '/_layout/pages/$id/preview'
    | '/_layout/pages/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  PagesIndexRoute: typeof PagesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  PagesIndexRoute: PagesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/pages/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/pages/$id/preview",
        "/_layout/pages/$id/"
      ]
    },
    "/pages/": {
      "filePath": "pages.index.tsx"
    },
    "/_layout/pages/$id/preview": {
      "filePath": "_layout.pages.$id.preview.tsx",
      "parent": "/_layout"
    },
    "/_layout/pages/$id/": {
      "filePath": "_layout.pages.$id.index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
